<?php

/**
 * @file
 * Contains partnersite_profile.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Mail\MailFormatHelper;
use Drupal\Core\Entity\EntityInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\EntityOwnerInterface;

/**
 * Implements hook_help().
 */
function partnersite_profile_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the partnersite_profile module.
    case 'help.page.partnersite_profile':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Partner Site access mappable keys') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function partnersite_profile_theme() {
  return [
    'partnersite_profile' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_mail().
 */
function partnersite_profile_mail($key, &$message, $params) {
	if ($key == 'notify_partner_case') {
		$account  = $params['account'];
		$language = isset($message['langcode']) ? $message['langcode'] : '';
		if (!$language) {
			$language = $params['language'];
		}
		$path             = &$params['path'];

		$mail_service = \Drupal::service('partnersite_profile.mail_access_link');
		//$variables = $mail_service->
		$variables        = $mail_service->partnerSiteMailPlaceholders($account, $language, $path);

		$subject = $mail_service->partnersite_profile_fetchBasicConfigValues('profile_mail.subject', $path, $language, $variables);
		$body    = $mail_service->partnersite_profile_fetchBasicConfigValues('profile_mail.body', $path, $language, $variables);

		$subject = \Drupal::token()->replace($subject, array('user' => $account));
		$body    = \Drupal::token()->replace($body, array('user' => $account));

		$message['subject'] .= $subject;
		$message['body'][] = MailFormatHelper::htmlToText($body);
	}
}

/**
 * Implements hook_token_info().
 */
function partnersite_profile_token_info() {
	$info = [];
	$info['types']['profile_group'] = [
		'name' => t('Partner Profile Tokens Set'),
		'description' => t("Partner profile custom tokens groups for use."),
	];
	$info['tokens']['profile_group']['partnersite_profile_accesslnk'][] = [
		'name' => t('Partner Profile Access Link'),
		'description' => t("Access link set to the configured default path."),
	];
	return $info;
}

/**
 * Implements hook_tokens().
 */
function partnersite_profile_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata)
{
	$send_mail_service = \Drupal::service('partnersite_profile.mail_access_link');
	$replacements = [];

	$replacements = array();
	if ($type == 'profile_group' && !empty($data['user'])) {
		$account = $data['user'];

		foreach ($tokens as $name => $original) {
			switch ($name) {
				case 'partnersite_profile_accesslnk':
					$path                    = isset($data['path']) ? $data['path'] : NULL;
					$replacements[$original] = $send_mail_service->prepareAccessLink($account, $path);
					break;
			}
		}
	}
	return $replacements;

}

/**
 * Implements hook_entity_type_presave()
 */
function partnersite_profile_entity_presave(EntityInterface $entity) {


	if( $entity->getEntityTypeId() == 'user'){

		if ($entity->isNew() && !$entity->hasRole('partner_users')) {

			$partner_profiles = \Drupal::service('entity_type.manager')
				->getStorage('partnersite_profiles')
				->load($entity->label());
			if( $partner_profiles->getEntityTypeId() == 'partnersite_profiles' ) {

				$admin = FALSE;

				foreach ($entity->getRoles(TRUE) as $id) {
					$role = Role::load($id);
					if ($role->isAdmin()) {
						$admin = TRUE;
						break;
					}
				}

				if (!$admin) {
					$entity->addRole('partner_users');
				}
			}
		}

	}

}
